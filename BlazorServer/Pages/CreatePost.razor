@page "/CreatePost"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject IUserService userService;
@inject NavigationManager navMgr;

<AuthorizeView>
    <Authorized>
        <div class="card">
            @if (users == null)
            {
                <label>Loading users...</label>
            }
            else if (!users.Any())
            {
                <label>No users, you cannot create a Todo without assignee.</label>
            }
            else
            {
                <h3>Create Todo</h3>
                <div class="form-group field">
                    <label>Title:</label>
                    <input type="text" @bind="postTitle"/>
                    <label>Body:</label>
                    <input type="text" @bind="postBody"/>
                </div>
                <div class="form-group field">
                    <label>Assignee:</label>
                    <select @bind="selectedUserId">
                        <option>Choose</option>
                        @foreach (User user in users)
                        {
                            <option value="@user.id">@user.username</option>
                        }
                    </select>
                </div>
                <div class="button-row">
                    @if (!string.IsNullOrEmpty(msg))
                    {
                        <label style="color: red">@msg</label>
                    }
                    <button @onclick="Create" class="acceptbtn">Create</button>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <h2>You need to log-in to create a post</h2>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private async Task Create()
    {
        msg = "";
        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "The body cannot be empty!";
        }

        try
        {
            PostCreationDTO dto = new((int)selectedUserId, postTitle, postBody);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
            //TODO Either put someting on / or make it go to the right place
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


}