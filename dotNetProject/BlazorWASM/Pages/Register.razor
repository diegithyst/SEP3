@page "/Register"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IAuthService authService
@inject NavigationManager nav

<h3>Register</h3>

<div class="card">
 <div class="form-group field">
        <label>Username:</label>
        <input type="text" @bind="username" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Password:</label>
        <input type="text" @bind="password" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>First name:</label>
        <input type="text" @bind="firstname" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Last name:</label>
        <input type="text" @bind="lastname" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Country:</label>
        <input type="text" @bind="country" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Identity Document:</label>
        <input type="text" @bind="identityDocument" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Birthday:</label>
        <input type="text" @bind="birthday" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Plan Type:</label>
        <input type="text" @bind="planType" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="button-row">
        <button @onclick="RegisterAsync" disabled="@(string.IsNullOrEmpty(username))" class="acceptbtn">Register</button>
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string firstname = "";
    private string lastname = "";
    private string country = "";
    private string identityDocument = "";
    private string birthday = "";
    private string planType = "";

    private string error = "";
    private async Task RegisterAsync()
    {
        error = "";
        try
        {
            await authService.RegisterAsync(new ClientCreationDTO(firstname, lastname, username, password, country, identityDocument, birthday, planType));
            nav.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            error = $"Cannot register: {e.Message}";
        }
    }
}