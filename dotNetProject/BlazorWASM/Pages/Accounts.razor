@page "/Accounts"
@using Domain.Model
@using HttpClients.ClientInterfaces
@inject IAccountService accountService
@inject NavigationManager nav
@attribute [Authorize]


<h3>Accounts</h3>
@if (accounts != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Account ID</th>
            <th>Account Name</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var item in accounts)
        {
            <tr @onclick="@(() => nav.NavigateTo($"/ViewAccount/{@item.id}"))">
                <td>@item.id</td>
                <td>@item.name </td>
            </tr>
        }
        </tbody>
    </table>
}

<button @onclick="@(() => nav.NavigateTo($"/CreateAccount/{false}"))">Create Normal Account</button>

<button @onclick="@(() => nav.NavigateTo($"/CreateAccount/{true}"))">Create Loan Account</button>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Account> accounts;
    private string msg = "";
    private int id;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        
        try
        {
            var user = (await AuthState).User;
            id = Int32.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
            //This may not work :c
            accounts = await accountService.GetByClientIdAsync(id);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
}