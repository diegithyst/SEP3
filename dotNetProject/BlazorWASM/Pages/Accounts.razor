@page "/Accounts"
@using Domain.Model
@using HttpClients.ClientInterfaces
@inject IAccountService accountService
@inject NavigationManager nav

<h3>Accounts</h3>
<table class="table">
    <thead>
        <tr>
            <th>Account ID</th>
            <th>Account Name</th>
            
        </tr>
    </thead>
    <tbody>
        @foreach (var item in accounts)
        {
            <tr>
                <td>@item.id</td>
                <td @onclick="@(() => nav.NavigateTo($"/ViewAccount/{item.id:long}"))">@item.name </td>
                <td>
                    <button @onclick="@(() => nav.NavigateTo($"/Transfer/{item.id:long}"))">Transfer</button>
                    </td>
            </tr>
        }
    </tbody>
</table>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Account> accounts;
    private string msg = "";
    private int id;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        id = Int32.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
        msg = "";
        try
        {
            //This may not work :c
            accounts = await accountService.GetAccountsByClientIdAsync(id);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
}