@page "/TransferMoney"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IMoneyTransferService mtService
<h3>TransferMoney</h3>

<div class="card">
    <div class="form-group field">
        <label>Account Receiver Number:</label>
        <input type="text" @bind="_accountNrReceiver" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label for="currency">Currency:</label>
        <select @bind="_currency" id="currency">
            <option selected>Dansk Krone</option>
            <option>Pound</option>
            <option>Euro</option>
        </select>
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label>Value:</label>
        <input type="text" @bind="_value" @bind:event="oninput" />
        @if (!string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="button-row">
        <button @onclick="TransferMoni" disabled="@(disableState)" class="acceptbtn">Send</button>
    </div>
</div>

@code {
    private string accountNrSeder;
    
    private string _accountNrReceiver = "";
    
    private string _currency;
    
    private string error = "";
    private bool disableState = true;

    protected void checkFields()
    {
        disableState =  _accountNrReceiver?.Length == 0 && _value?.Length == 0;
    }

    protected async Task TransferMoni()
    {
        error = "";
        try
        {
            await mtService.CreateAsync(new MoneyTransferCreationDto(long.Parse(accountNrSeder), long.Parse(_accountNrReceiver), _currency, double.Parse(_value)));
        }
        catch (Exception e)
        {
            error = $"Error: {e.Message}";
        }
    }
  
}