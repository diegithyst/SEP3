@page "/TransferMoney{id:long}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IMoneyTransferService mtService
<h3>TransferMoney</h3>

<div class="card">
    <div class="form-group field">
        <label>Account Receiver Number:</label>
        <input type="text" @bind="_accountNrReceiver" oninput="changed()" id="accountNr"/>
        @if (string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="form-group field">
        <label for="currency">Currency:</label>
        <select @bind="_currency" id="currency">
            <option selected>Dansk Krone</option>
            <option>Pound</option>
            <option>Euro</option>
        </select>
    </div>
    <div class="form-group field">
        <label>Value:</label>
        <input type="text" @bind="_value" oninput="changed()" id="valueNr" />
        @if (string.IsNullOrEmpty(error))
        {
            <label>@error</label>
        }
    </div>
    <div class="button-row">
        <button disabled  @onclick="TransferMoni" class="acceptbtn" id="bttn">Send</button>
    </div>
</div>

<script>
function changed(){
    var accountInput = document.getElementById("accountNr");
    var s = accountInput.value;
    var valueInput = document.getElementById("valueNr");
    var t = valueInput.value;
    if (s.length !== 0 && t.length !==0){
        document.getElementById("bttn").removeAttribute("disabled");
    }
  }
</script>

@code {
    [Parameter]
    public long id { get; set; }
    
    private string _accountNrReceiver;
    private string _value;
    private string _currency;
    
    private string error = "";

    protected async Task TransferMoni()
    {
        error = "";
        try
        {
            await mtService.CreateAsync(new MoneyTransferCreationDto(id, long.Parse(_accountNrReceiver), _currency, double.Parse(_value)));
        }
        catch (Exception e)
        {
            error = $"Error: {e.Message}";
        }
    }
  
}