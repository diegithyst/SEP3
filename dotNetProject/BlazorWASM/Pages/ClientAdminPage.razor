@page "/ClientAdminPage/{id:long}"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@inject IClientService ClientSquared
@inject NavigationManager navMgr;


<h3>Client @_client.id</h3>

<label>First Name: </label>
<input type="text" @bind="clientDTO.firstname"/>
<label>Last Name: </label>
<input type="text" @bind="clientDTO.lastname"/>
<label>Birthday: </label>
<input type="text" @bind="clientDTO.birthday"/>
<label>Country: </label>
<input type="text" @bind="clientDTO.country"/>
<label>Username: </label>
<input type="text" @bind="clientDTO.username"/>
<label>Password: </label>
<input type="text" @bind="clientDTO.password"/>
<label>Identity Document: </label>
<input type="text" @bind="clientDTO.identityDocument"/>
<label>Plan Type: </label>
<div class="row">
    <span> Current plan: @currentPlan</span>
</div>
<div class="row">
    <div class="mb-1">
        <select class="mr-2" @bind="@clientDTO.planType">
            @foreach (var plan in planList)
            {
                <option value="@planList">@planList</option>
            }
            <option></option>
        </select>
    </div>
</div>

<div class="button-row">
    <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
</div>
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

<div class="post-list">
    <div class="post-card">
        @foreach (var transactions in Clients)
        {
            <div class="post">
                <h2 class="post-title">
                    <a href="/ClientAdminPage/@client.id">@client.firstname @client.lastname</a>
                </h2>
                <p class="post-date">ID: @client.id</p>
            </div>
        }
    </div>
</div>


@code {

    string msg = "";

    [Parameter]
    public long id { get; set; }

    private string[] planList = new[] { "Default", "Bronze", "Silver", "Gold" };
    private string currentPlan;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private Client _client;
    private ClientUpdateDTO clientDTO;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal admin_ = authState.User;
    //TODO check that the logged user is an admin
        _client = await ClientSquared.GetByIdAsync(id);

        currentPlan = _client.planType.getName();
        clientDTO.firstname = _client.firstname;
        clientDTO.lastname = _client.lastname;
        clientDTO.username = _client.username;
        clientDTO.country = _client.country;
        clientDTO.identityDocument = _client.identityDocument;
        clientDTO.birthday = _client.birthday;
        clientDTO.planType = currentPlan;
    }

    private async void UpdateAsync()
    {
        try
        {
            await ClientSquared.UpdateAsync(clientDTO);
            navMgr.NavigateTo("/AdminMainPage");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}