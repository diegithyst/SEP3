@page "/ClientAdminPage/{id:long}"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@using System.Collections
@inject IClientService ClientSquared
@inject NavigationManager navMgr;
@inject IMoneyTransferService MoneyTransferService;
@attribute [Authorize("MustBeAdministrator")]


<h3>Client @clientDTO.id</h3>

<label>First Name: </label>
<input type="text" @bind="clientDTO.firstname"/>
<label>Last Name: </label>
<input type="text" @bind="clientDTO.lastname"/>
<label>Birthday: </label>
<input type="text" @bind="clientDTO.birthday"/>
<label>Country: </label>
<input type="text" @bind="clientDTO.country"/>
<label>Username: </label>
<input type="text" @bind="clientDTO.username"/>
<label>Password: </label>
<input type="text" @bind="clientDTO.password"/>
<label>Identity Document: </label>
<input type="text" @bind="clientDTO.identityDocument"/>
<label>Plan Type: </label>
<div class="row">
    <span> Current plan: @currentPlan</span>
</div>
<div class="row">
    <div class="mb-1">
        <select class="mr-2" @bind="@clientDTO.planType">
            @foreach (var plan in planList)
            {
                <option value="@plan">@plan</option>
            }
            <option></option>
        </select>
    </div>
</div>

<div class="button-row">
    <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
</div>
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

    <table class="table">
        <thead>
        <tr>
            <th>Sender Id</th>
            <th>Receiver Id</th>
            <th>Transaction Id</th>
            <th>Value</th>
            <th>Revert</th>
        </tr>
        </thead>
        <tbody>
        @if (transactions != null)
        {
            @foreach (var item in transactions!)
            {
                <tr>
                    <td>@item!.accountNumberSender</td>
                    <td>@item.accountNumberRecipient</td>
                    <td>@item.id</td>
                    <td>@item.amount</td>
                    <td><button @onclick="@(() => revertTransaction(item.id))">Revert</button></td>
                </tr>
            }
        }
        </tbody>
    </table>


@code {

    string msg = "";

    [Parameter]
    public long id { get; set; }

    public long transactionId { get; set; }

    private string[] planList = new[] { "Default", "Bronze", "Silver", "Gold" };
    private string currentPlan = "";
    
    private ClientUpdateDTO clientDTO = new ClientUpdateDTO(0);
    private List<MoneyTransfer> transactions = new List<MoneyTransfer>();

    protected override async Task OnInitializedAsync()
    {
        ClientUpdateDTO clientAsDto = await ClientSquared.GetByIdAsync(id);
        clientDTO.firstname = clientAsDto.firstname;
        clientDTO.lastname = clientAsDto.lastname;
        clientDTO.username = clientAsDto.username;
        clientDTO.country = clientAsDto.country;
        clientDTO.identityDocument = clientAsDto.identityDocument;
        clientDTO.birthday = clientAsDto.birthday;
        clientDTO.planType = clientAsDto.planType;

        IEnumerable<MoneyTransfer?>? transfers = await MoneyTransferService.GetListByAccountIdAsync(id);
        if (transfers.Count() > 0)
        {
            foreach (var trans in transfers)
            {
                transactions.Add(trans);
            }
        }
    }

    private async void UpdateAsync()
    {
        try
        {
            //await ClientSquared.UpdateAsync(clientDTO);
            navMgr.NavigateTo("/AdminMainPage");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async void revertTransaction(long id)
    {
        MoneyTransfer? transfer = await MoneyTransferService.GetByIdAsync(id);
        MoneyTransferCreationDto dto = new MoneyTransferCreationDto(transfer!.accountNumberSender, transfer.accountNumberRecipient, transfer.currency, transfer.amount);
        await MoneyTransferService.CreateAsync(dto);
    }

}