@page "/ClientAdminPage/{id:long}"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@using System.Collections
@inject IClientService ClientSquared
@inject IAccountService accountService
@inject IMoneyTransferService transferService
@inject NavigationManager navMgr;
@inject IMoneyTransferService MoneyTransferService;
@attribute [Authorize("MustBeAdministrator")]


<h3>Client @clientDTO.id, @clientDTO.firstname @clientDTO.lastname</h3>

<label>First Name: </label>
<input type="text" @bind="clientDTO.firstname"/>
<label>Last Name: </label>
<input type="text" @bind="clientDTO.lastname"/>
<label>Birthday: </label>
<input type="text" @bind="clientDTO.birthday"/>
<label>Country: </label>
<input type="text" @bind="clientDTO.country"/>
<label>Username: </label>
<input type="text" @bind="clientDTO.username"/>
<label>Password: </label>
<input type="text" @bind="clientDTO.password"/>
<label>Identity Document: </label>
<input type="text" @bind="clientDTO.identityDocument"/>
<label>Plan Type: </label>
<div class="row">
    <div class="mb-1">
        <select class="mr-2" @bind="@clientDTO.planType">
            @foreach (var plan in planList)
            {
                <option value="@plan">@plan</option>
            }
        </select>
    </div>
</div>

<div class="button-row">
    <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
</div>
<div class="button-row">
    <button @onclick="DeleteUser" class="acceptbtn">Delete Client</button>
</div>
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}
        @if (transfers != null)
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Sender Id</th>
                    <th>Receiver Id</th>
                    <th>Transaction Id</th>
                    <th>Value</th>
                    <th>Revert</th>
                </tr>
                </thead>
                @foreach (var item in transfers)
                {
                    <tbody>
                    <tr>
                        <td>@item!.accountNumberSender</td>
                        <td>@item.accountNumberRecipient</td>
                        <td>@item.id</td>
                        <td>@item.amount</td>
                        <td><button @onclick="@(() => revertTransaction(item.id))">Revert</button></td>
                    </tr>
                    </tbody>
                }
            </table>
        }
      @if (transfers == null){
          <p>Client has no transactions yet.</p>
      }


@code {

    string msg = "";

    [Parameter]
    public long id { get; set; }

    public long transactionId { get; set; }

    private string[] planList = new[] { "Default", "Bronze", "Silver", "Gold" };
    private string currentPlan = "";
    
    private ClientUpdateDTO clientDTO;
    private IEnumerable<MoneyTransfer> transfers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clientDTO = new ClientUpdateDTO(id);
            clientDTO = await ClientSquared.GetByIdAsync(id);
            currentPlan = clientDTO.planType;

            transfers = await MoneyTransferService.GetListByAccountIdAsync(id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
        
    }

    private async void UpdateAsync()
    {
        try
        {
            await ClientSquared.UpdateAsync(clientDTO);
            if (clientDTO!.planType! != currentPlan)
            {
                buyPlan(clientDTO.planType);
                await OnInitializedAsync();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async void revertTransaction(long id)
    {
        MoneyTransfer? transfer = await MoneyTransferService.GetByIdAsync(id);
        MoneyTransferCreationDto dto = new MoneyTransferCreationDto(transfer!.accountNumberSender, transfer.accountNumberRecipient, transfer.currency, transfer.amount);
        await MoneyTransferService.CreateAsync(dto);
        await OnInitializedAsync();

    }
    
    private async void buyPlan(string plan)
    {
        double planPrice = 0;
        switch (plan)
        {
            case "Default":
                planPrice = 0;
                break;
            case "Bronze":
                planPrice = 2.9;
                break;
            case "Silver":
                planPrice = 4.9;
                break;
            case "Gold":
                planPrice = 7.49;
                break;
        }
        IEnumerable<Account> accounts = await accountService.GetByClientIdAsync(clientDTO.id);
        ClientUpdateDTO dto = new ClientUpdateDTO(id)
        {
            firstname = clientDTO.firstname,
            lastname = clientDTO.lastname,
            username = clientDTO.username,
            password = clientDTO.password,
            country = clientDTO.country,
            identityDocument = clientDTO.identityDocument,
            birthday = clientDTO.birthday,
            planType = plan,
            id = clientDTO.id
        };
        MoneyTransferCreationDto dto2 = new MoneyTransferCreationDto()
        {
            Amount = planPrice,
            ReceiverAccountNumber = 1,
            SenderAccountNumber = accounts.ElementAt(0).id,
            SenderCurrency = "Euro"
        };
        await ClientSquared.UpdateAsync(dto);
        await transferService.CreateAsync(dto2);
        navMgr.NavigateTo(navMgr.Uri, true);
    }

    private async void DeleteUser()
    {
        await ClientSquared.DeleteAsync(id);
        navMgr.NavigateTo("/AdminMainPage");
    }
}