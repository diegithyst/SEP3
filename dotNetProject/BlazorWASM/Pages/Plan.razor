@page "/Plan"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@using BlazorWASM.Data
@using BronzePlan = BlazorWASM.Data.BronzePlan
@using DefaultPlan = BlazorWASM.Data.DefaultPlan
@using GoldPlan = BlazorWASM.Data.GoldPlan
@using SilverPlan = BlazorWASM.Data.SilverPlan
@inject IClientService clientService
@inject IMoneyTransferService transferService
@inject IAccountService accountService
@inject NavigationManager navMgr
@attribute [Authorize]


@if (client != null)
{
    <text>Currently selected plan is @client.planType</text>
    <table class="table">
        <thead>
        <tr>
            <th>Plan name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Buy</th>
        </tr>
        </thead>
        <tbody>
        @foreach(IPlanBlazor plan in plans)
        {
            <tr>
                <td>@plan.getName()</td>
                <td>@plan.getDescription()</td>
                <td>@*@plan.getPrice/month*@</td>
                <td>
                    <button @onclick="@(() => buyPlan(@plan.getName(), @plan.getPrice()))">Buy @plan.getName() plan</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
@if (!string.IsNullOrEmpty(msg))
{
    <label>@msg</label>
}
}
@if (client == null)
{
<text>You have no permission to enter this page</text>
}

@code {


    [CascadingParameter]
    public Task<AuthenticationState?> AuthState { get; set; } = null!;

    private string msg = "";
    
    private IPlanBlazor Default = new DefaultPlan();
    private IPlanBlazor Bronze = new BronzePlan();
    private IPlanBlazor Silver = new SilverPlan();
    private IPlanBlazor Gold = new GoldPlan();
    private IList<IPlanBlazor> plans = new List<IPlanBlazor>();


    private double[] prices = new[] { 0.0, 2.99, 4.99, 7.49 };

    private ClientUpdateDTO? client { get; set; }
    private string? loggedUsername { get; set; }
    private long id;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        id = long.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
        client = await clientService.GetByIdAsync(id);
            plans.Add(Default);
        plans.Add(Bronze);
        plans.Add(Silver);
        plans.Add(Gold);
    }


    private async void buyPlan(string plan, double price)
    {
        IPlan realPlan = PlanMaker.MakePlan(plan);
        IEnumerable<Account> accounts = await accountService.GetByClientIdAsync(client.id);
        ClientUpdateDTO dto = new ClientUpdateDTO(id)
        {
            firstname = client.firstname,
            lastname = client.lastname,
            username = client.username,
            password = client.password,
            country = client.country,
            identityDocument = client.identityDocument,
            birthday = client.birthday,
            planType = plan,
            id = client.id
        };
        MoneyTransferCreationDto dto2 = new MoneyTransferCreationDto()
        {
            Amount = price,
            ReceiverAccountNumber = 1,
            SenderAccountNumber = accounts.ElementAt(0).id,
            SenderCurrency = "Euro"
        };
        await clientService.UpdateAsync(dto);
        await transferService.CreateAsync(dto2);
        navMgr.NavigateTo("/Accounts");
    }

}