@page "/Plan"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IClientService clientService
@inject NavigationManager navMgr
@attribute [Authorize]


@if (client != null)
{
    <text>Currently selected plan is @client.planType</text>
    <table class="table">
        <thead>
        <tr>
            <th>Plan name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Buy</th>
        </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < plans.Length; i++)
        {
            <tr>
                <td>@plans[i]</td>
                <td>@planDescriptions[i]</td>
                <td>@prices[i]â‚¬/month</td>
                <td>
                    <button @onclick="@(() => buyPlan(@plans[i]))">Buy @plans[i] plan</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
@if (!string.IsNullOrEmpty(msg))
{
    <label>@msg</label>
}
}
@if (client == null)
{
<text>You have no permission to enter this page</text>
}

@code {


    [CascadingParameter]
    public Task<AuthenticationState?> AuthState { get; set; } = null!;

    private string msg = "";

    private string[] plans = new[] { "Default", "Bronze", "Silver", "Gold" };

    private string[] planDescriptions = new[]
    {
        $"You get free banking! {System.Environment.NewLine} You get no commission on regular transactions and free exchange of currencies. With no limit! {System.Environment.NewLine} Finally, you get 0,005 interest rate and 0,25 loan rate!",
        $"You get all the benefits from the previous plan! {System.Environment.NewLine} Plus, you get 0,01 interest rate and 0,10 loan rate!",
        $"You get all the benefits from the previous plan! {System.Environment.NewLine} Plus, you get 0,02 interest rate and 0,08 loan rate!",
        $"You get all the benefits from the previous plan! {System.Environment.NewLine} Plus, you get 0,05 interest rate and 0,1 loan rate!"
    };

    private double[] prices = new[] { 0.0, 2.99, 4.99, 7.49 };

    private ClientUpdateDTO? client { get; set; }
    private string? loggedUsername { get; set; }
    private long id;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        id = long.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
        client = await clientService.GetByIdAsync(id);
    }


    private async void buyPlan(string plan)
    {
        IPlan realPlan = PlanMaker.MakePlan(plan);
        ClientUpdateDTO dto = new ClientUpdateDTO(id)
        {
            firstname = client.firstname,
            lastname = client.lastname,
            username = client.username,
            password = client.password,
            country = client.country,
            identityDocument = client.identityDocument,
            birthday = client.birthday,
            planType = plan,
            id = client.id
        };
        navMgr.NavigateTo("/Accounts");
    }

}