@page "/ViewAccount/{id:int}"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IAccountService accountService
@inject IMoneyTransferService moneyTransferService
@inject IClientService clientService
@inject NavigationManager navMgr

@if (allowed())
{
    <div>
        <p>Id of the account: @id</p>
        <br/>
        <p>Name of the account: @name</p>
        <br/>
        <p>Currency of the account: @MainCurrency</p>
        <br/>
        <p>Loan of the account: @Loan</p>
        <br/>
        <p>Euros In Account: @roundedEuro€</p>
        <br/>
        <p>Pounds In Account: @roundedPound£</p>
        <br/>
        <p>Krone In Account: @roundedKrone DKK</p>
    </div>

    <div class="card">
        <div class="form-group field">
            <label>Account Receiver Number:</label>
            <input type="text" @bind="_accountNrReceiver" oninput="changed()" id="accountNr"/>
        </div>
        <div class="form-group field">
            <label for="currency">Currency:</label>
            <select @bind="_currency" id="currency">
                <option selected>Krone</option>
                <option>Pound</option>
                <option>Euro</option>
            </select>
        </div>
        <div class="form-group field">
            <label>Value:</label>
            <input type="text" @bind="_value" oninput="changed()" id="valueNr"/>
        </div>
        <div class="button-row">
            <button disabled @onclick="TransferMoni" class="acceptbtn" id="bttn">Send</button>
            @if (!string.IsNullOrEmpty(error))
            {
                <label>@error</label>
            }
        </div>
    </div>

    <script>
function changed(){
    var accountInput = document.getElementById("accountNr");
    var s = accountInput.value;
    var valueInput = document.getElementById("valueNr");
    var t = valueInput.value;
    if (s.length !== 0 && t.length !==0){
        document.getElementById("bttn").removeAttribute("disabled");
    }
  }
</script>

    <h4>Exchange Currencies</h4>
    <br/>
    <label>Amount to exchange</label>
    <input type="text" @bind="Exchange"/>
    <label>Currency to get the money from:</label>
    <select @bind="_currency1" id="currency">
        <option selected>Krone</option>
        <option>Pound</option>
        <option>Euro</option>
    </select>
    <label>Currency to convert the money:</label>
    <select @bind="_currency2" id="currency">
        <option selected>Krone</option>
        <option>Pound</option>
        <option>Euro</option>
    </select>
    <div class="button-row">
        <button @onclick="() => ExchangeCurrencies(double.Parse(Exchange), _currency1, _currency2)" disabled="@(string.IsNullOrEmpty(_currency1) || string.IsNullOrEmpty(_currency2))" class="acceptbtn">Exchange</button>
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    [Parameter]
    public int id { get; set; }

    private string MainCurrency = "";
    private  int UserId;
    private bool Loan;
    private string name;
    private ICurrency _euro = new Euro();
    private ICurrency _pound = new Pound();
    private ICurrency _krone = new Krone();
    private double roundedEuro = 0;
    private double roundedPound =0 ;
    private double roundedKrone =0 ;

    private string msg = "";
    private long accountNrSeder;
    private string _accountNrReceiver;
    private string _value;
    private string _currency;
    private ClientUpdateDTO client;
    private string Exchange = "";
    private string _currency1 = "";
    private string _currency2 = "";

    private IEnumerable<Account?>? clientsAccounts;

    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await AuthState).User;
            UserId = Int32.Parse(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
            loadInfo();
            
            client = await clientService.GetByIdAsync(UserId);
            clientsAccounts = await accountService.GetByClientIdAsync(client.id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async void loadInfo()
    {
        Account account = await accountService.GetAccountAsync(id);
        MainCurrency = account.mainCurrency;
        Loan = account.loan;
        name = account.name;
        _euro = account.Euro;
        _pound = account.Pound;
        _krone = account.Krone;
        roundedEuro = Math.Round(_euro.balance, 2);
        roundedPound = Math.Round(_pound.balance, 2);
        roundedKrone = Math.Round(_krone.balance, 2);

        
        accountNrSeder = id;
    }

    private async Task TransferMoni()
    {
        error = "";
        try
        {
            if (accountNrSeder.Equals(long.Parse(_accountNrReceiver)))
            {
                throw new Exception("You cannot send money to the same account");
            }
            MoneyTransferCreationDto dto = new MoneyTransferCreationDto(accountNrSeder, long.Parse(_accountNrReceiver), _currency, double.Parse(_value));
            await moneyTransferService.CreateAsync(dto);
            msg = $"{_value}{_currency} sent to account id: {_accountNrReceiver} ";
            navMgr.NavigateTo(navMgr.Uri, true);
        }
        catch (Exception e)
        {
            error = $"Error: {e.Message}";
            msg = error;
        }
    }

    private bool allowed()
    {
        if (clientsAccounts == null)
        {
            return false;
        }
        foreach (var account in clientsAccounts)
        {
            if (account.id == id)
            {
                return true;
            }
        }
        return false;
    }

    private async void ExchangeCurrencies(double value, string senderCurrency, string receiverCurrency)
    {
        try
        {
            AccountExchangeDTO dto = new AccountExchangeDTO()
            {
                id = accountNrSeder,
                amount = value,
                currencyFrom = senderCurrency.ToLower(),
                currencyTo = receiverCurrency.ToLower()
            };
            await accountService.UpdateAsync(dto);
            msg = $"{value}{senderCurrency} converted to {receiverCurrency}";
            navMgr.NavigateTo(navMgr.Uri, true);  
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
  }

}